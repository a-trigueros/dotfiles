" Source: https://www.cyberwizard.io/posts/the-ultimate-ideavim-setup/

"" .ideavimrc - Matt Chapman


"" Base Settings
"" ========================================================

set scrolloff=10
set relativenumber
set showmode
set showcmd

set foldmethod=syntax

set smartcase
set incsearch
set hlsearch

set visualbell

" Use system clipboard
set clipboard+=unnamed   

let mapleader = " "

nnoremap <Esc> :nohlsearch<CR><Esc>
inoremap <Esc> <Esc>:nohlsearch<CR>
snoremap <Esc> <Esc>:nohlsearch<CR>
inoremap jk <Esc>

set easymotion
set which-key
set notimeout

" Navigation entre les zones
" Rider configuration
nnoremap <C-h> :action ActivateProjectToolWindow<CR>
" Don't work :( nnoremap <C-l> :action ActivateToolWindowAiAssistant<CR>

" Popup navigation
" imap <C-j> <C-n> " DONE with Karabiner elements
imap <C-k> <C-p>

" Buffers navigation
nnoremap <S-l> :tabnext<CR>
nnoremap <S-h> :tabprev<CR>

" Easymotion
let g:WhichKeyDesc_jump = "<leader>j Jump"
map <leader>j <Plug>(easymotion-s)

" Buffer and build operations
let g:WhichKeyDesc_bufferbuild = "<leader>b Buffers / build"
let g:WhichKeyDesc_bufferbuild_delete = "<leader>bd Delete buffer"
nnoremap <leader>bd :action CloseContent<CR>
let g:WhichKeyDesc_bufferbuild_delete_others = "<leader>bo Delete other buffers"
nnoremap <leader>bo :action CloseAllEditorsButActive<CR>
let g:WhichKeyDesc_bufferbuild_toggle_pin= "<leader>bp Toggle pin on buffer"
nnoremap <leader>bp :action PinActiveEditorTab<CR>
let g:WhichKeyDesc_bufferbuild_delete_unpinned= "<leader>bP Close all non-pinned buffers"
nnoremap <leader>bP :action CloseAllUnpinnedEditors<CR>
" Build
let g:WhichKeyDesc_bufferbuild_clean_project = "<leader>bc Clean project"
nnoremap <leader>bc :action CleanCurrentProject<CR>
let g:WhichKeyDesc_bufferbuild_clean_solution = "<leader>bC Clean solution"
nnoremap <leader>bC :action CleanSolutionAction<CR>
let g:WhichKeyDesc_bufferbuild_Build_project = "<leader>bb Build project"
nnoremap <leader>bb :action BuildCurrentProject<CR>
let g:WhichKeyDesc_bufferbuild_build_solution = "<leader>bB Build solution"
nnoremap <leader>bB :action BuildSolutionAction<CR>
let g:WhichKeyDesc_bufferbuild_rebuild_project = "<leader>br Rebuild project"
nnoremap <leader>br :action RebuildCurrentProject<CR>
let g:WhichKeyDesc_bufferbuild_rebuild_solution = "<leader>bR Rebuild solution"
nnoremap <leader>bR :action BuildSolutionAction<CR>

" Comments
nnoremap gco o<Esc>:action CommentByLineComment<CR>
nnoremap gcO O<Esc>:action CommentByLineComment<CR>
xnoremap gc :action CommentByLineComment<CR>

" Code
let g:WhichKeyDesc_code = "<leader>c Code"
let g:WhichKeyDesc_code_format = "<leader>cf Format code"
nnoremap <leader>cf :action ReformatCode<CR>
xnoremap <leader>cf :action ReformatCode<CR>
let g:WhichKeyDesc_code_errorDescription = "<leader>cd Show error description"
nnoremap <leader>cd :action ShowErrorDescription<CR>
let g:WhichKeyDesc_code_intentions = "<leader>cl Show suggestions"
nnoremap <leader>cl :action ShowIntentionActions<CR>
let g:WhichKeyDesc_code_RenameSymbol = "<leader>cr Rename Symbol"
nnoremap <leader>cr :action RenameElement<CR>
let g:WhichKeyDesc_code_RenameFile = "<leader>cR Rename File"
nnoremap <leader>cR :action RenameElement<CR>
let g:WhichKeyDesc_code_alternateIntentions = "<leader>cA Show intention actions"
nnoremap <leader>cA :action ShowIntentionActions<CR>
let g:WhichKeyDesc_code_surroundWith = "<leader>cs Surround with"
nmap <leader>cs :action SurroundWith<CR>
vmap <leader>cs :action SurroundWith<CR>

" Collapse 
let g:WhichKeyDesc_collapse = "<leader>z Col/ Open"
let g:WhickKeyDesc_collapse_all = "<leader>zc Collapse all"
map <leader>zc :action CollapseAllRegion<CR>
let g:WhickKeyDesc_open_all = "<leader>zo Open all"
map <leader>zo :action ExpandAllRegions<CR>

" Debug
let g:WhichKeyDesc_debug = "<leader>d Debug"
let g:WhichKeyDesc_debug_attach_to_process = "<leader>da Attach to process"
nnoremap <leader>da :action XDebugger.AttachToProcess<CR>
let g:WhichKeyDesc_debug_reattach = "<leader>dA Attach to last process"
nnoremap <leader>dA :action RiderReattach<CR>
let g:WhichKeyDesc_debug_toggle_breakpoint = "<leader>db Toggle breakpoint"
nnoremap <leader>db :action ToggleLineBreakpoint<CR>
let g:WhichKeyDesc_debug_edit_breakpoint = "<leader>dB Edit breakpoint"
nnoremap <leader>dB :action EditBreakpoint<CR>
let g:WhichKeyDesc_debug_continue = "<leader>dc continue"
nnoremap <leader>dc :action Resume<CR>
let g:WhichKeyDesc_debug_jump_to_cursor = "<leader>dC Jump to cursor"
nnoremap <leader>dC :action JumpToStatement<CR>
let g:WhichKeyDesc_debug_run = "<leader>dr Run"
nnoremap <leader>dr :action Run<CR>
let g:WhichKeyDesc_debug_debug = "<leader>dR Debug"
nnoremap <leader>dR :action Debug<CR>
let g:WhichKeyDesc_debug_step_into = "<leader>di Step into"
nnoremap <leader>di :action StepInto<CR>
let g:WhichKeyDesc_debug_step_into_alternate = "<leader>dj Step into"
nnoremap <leader>dj :action StepInto<CR>
let g:WhichKeyDesc_debug_step_out = "<leader>dO Step out"
nnoremap <leader>dO :action StepOut<CR>
let g:WhichKeyDesc_debug_step_out_alternate = "<leader>dk Step out"
nnoremap <leader>dk :action StepOut<CR>
let g:WhichKeyDesc_debug_step_over = "<leader>do Step over"
nnoremap <leader>do :action StepOver<CR>
let g:WhichKeyDesc_debug_step_over_alternate = "<leader>dl Step over"
nnoremap <leader>dl :action StepOver<CR>
let g:WhichKeyDesc_debug_terminate = "<leader>dt Terminate debug"
nnoremap <leader>dt :action Stop<CR>

" Find
let g:WhichKeyDesc_Find = "<leader>f Find"
let g:WhichKeyDesc_Find_buffer = "<leader>fb Find buffer"
nnoremap <leader>fb :action Switcher<CR>
let g:WhichKeyDesc_Find_everywhere = "<leader>fe Find everywhere"
nnoremap <leader>fe :action SearchEverywhere<CR>
let g:WhichKeyDesc_Find_file = "<leader>ff Find file"
nnoremap <leader>ff :action GotoFile<CR>
let g:WhichKeyDesc_Find_class = "<leader>fc Find class"
nnoremap <leader>fc :action GotoClass<CR>
let g:WhichKeyDesc_Find_symbol = "<leader>fs Find symbol"
nnoremap <leader>fs :action GotoSymbol<CR>
let g:WhichKeyDesc_Find_action = "<leader>fa Find action"
nnoremap <leader>fa :action GotoAction<CR>
let g:WhichKeyDesc_Find_text = "<leader>ft Find text"
nnoremap <leader>ft :action TextSearchAction<CR>

" Refactor
let g:WhichKeyDesc_Refactor = "<leader>r Refactor"
let g:WhichKeyDesc_Refactor_this = "<leader>rr Refactor this"
nmap <leader>rr :action Refactorings.QuickListPopupAction<CR>
let g:WhichKeyDesc_Refactor_extract_function = "<leader>rf Extract function"
nnoremap <leader>rf :action ExtractMethod<CR>
xnoremap <leader>rf :action ExtractMethod<CR>
let g:WhichKeyDesc_Refactor_inline_variable = "<leader>ri Inline variable"
nnoremap <leader>ri :action Inline<CR>
xnoremap <leader>ri :action Inline<CR>
let g:WhichKeyDesc_Refactor_Extract_variable = "<leader>rx Extract variable"
nnoremap <leader>rx :action IntroduceVariable<CR>
xnoremap <leader>rx :action IntroduceVariable<CR>

let g:WhichKeyDesc_test = "<leader>t Tests"
let g:WhichKeyDesc_test_run_last = "<leader>tl Last run"
nnoremap <leader>tl :action RunLastRun<CR>
let g:WhichKeyDesc_test_show_context = "<leader>to Show output"
nnoremap <leader>to :action ShowRunContent<CR>
let g:WhichKeyDesc_test_toggle_output_Panel = "<leader>tO Toggle output panel"
nnoremap <leader>tO :action ActivateRunToolWindow<CR>
let g:WhichKeyDesc_test_run_nearest = "<leader>tr Run nearest"
nnoremap <leader>tr :action Run<CR>
let g:WhichKeyDesc_test_toggle_result = "<leader>ts Show results"
nnoremap <leader>ts :action ToggleTestResults<CR>
let g:WhichKeyDesc_test_stop = "<leader>tS Stop tests"
nnoremap <leader>tS :action Stop<CR>
let g:WhichKeyDesc_test_run_file = "<leader>tt Run all tests in file"
nnoremap <leader>tt :action RunFile<CR>
let g:WhichKeyDesc_test_run_all_tests = "<leader>tT Run all tests"
nnoremap <leader>tT :action RunAllTests<CR>
let g:WhichKeyDesc_test_toggle_Watch = "<leader>tw Toggle watch"
nnoremap <leader>tw :action ActivateWatchToolWindow<CR>

nnoremap gd :action GotoDeclaration<CR>
nnoremap gD :action GotoDeclaration<CR>
nnoremap gI :action GotoImplementation<CR>
nnoremap gr :action FindUsages<CR>
nnoremap gy :action GotoTypeDeclaration<CR>
nnoremap K :action QuickJavaDoc<CR>
nnoremap gK :action ParameterInfo<CR>

nnoremap ]] :action GotoNextError<CR>
nnoremap [[ :action GotoPreviousError<CR>

" For memo
" zo      " ouvrir un pli
" zc      " fermer un pli
" zr      " ouvrir un niveau de plis supplémentaire
" zm      " fermer un niveau de plis supplémentaire
" zR      " ouvrir tous les niveaux de plis
" zM      " fermer tous les niveaux de plis

" Operations

let g:WhichKeyDesc_quit = "<leader>q Quit"

let g:WhichKeyDesc_quit_quit = "<leader>qq Close application"
nnoremap <leader>qq :action Exit<CR>
